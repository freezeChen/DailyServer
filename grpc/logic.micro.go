// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: logic.proto

package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for LogicService service

type LogicService interface {
	Check(ctx context.Context, in *CheckReq, opts ...client.CallOption) (*CheckReply, error)
	Receive(ctx context.Context, in *ReceiveReq, opts ...client.CallOption) (*ReceiveReply, error)
}

type logicService struct {
	c    client.Client
	name string
}

func NewLogicService(name string, c client.Client) LogicService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "grpc"
	}
	return &logicService{
		c:    c,
		name: name,
	}
}

func (c *logicService) Check(ctx context.Context, in *CheckReq, opts ...client.CallOption) (*CheckReply, error) {
	req := c.c.NewRequest(c.name, "LogicService.Check", in)
	out := new(CheckReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicService) Receive(ctx context.Context, in *ReceiveReq, opts ...client.CallOption) (*ReceiveReply, error) {
	req := c.c.NewRequest(c.name, "LogicService.Receive", in)
	out := new(ReceiveReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LogicService service

type LogicServiceHandler interface {
	Check(context.Context, *CheckReq, *CheckReply) error
	Receive(context.Context, *ReceiveReq, *ReceiveReply) error
}

func RegisterLogicServiceHandler(s server.Server, hdlr LogicServiceHandler, opts ...server.HandlerOption) error {
	type logicService interface {
		Check(ctx context.Context, in *CheckReq, out *CheckReply) error
		Receive(ctx context.Context, in *ReceiveReq, out *ReceiveReply) error
	}
	type LogicService struct {
		logicService
	}
	h := &logicServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LogicService{h}, opts...))
}

type logicServiceHandler struct {
	LogicServiceHandler
}

func (h *logicServiceHandler) Check(ctx context.Context, in *CheckReq, out *CheckReply) error {
	return h.LogicServiceHandler.Check(ctx, in, out)
}

func (h *logicServiceHandler) Receive(ctx context.Context, in *ReceiveReq, out *ReceiveReply) error {
	return h.LogicServiceHandler.Receive(ctx, in, out)
}
